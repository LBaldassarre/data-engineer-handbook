-------------------------------------------------------------------------
/* CREATE "SEASON_STATS" STRUC, "SCORING_CLASS" ENUM, AND PLAYER TABLE */
-------------------------------------------------------------------------
CREATE TYPE SEASON_STATS AS (
	SEASON INTEGER,
	GP INTEGER,
	PTS REAL,
	REB REAL,
	AST REAL
);
CREATE TYPE SCORING_CLASS AS ENUM('star', 'good', 'average', 'bad');
CREATE TABLE PLAYERS (
	PLAYER_NAME TEXT,
	HEIGHT TEXT,
	COLLEGE TEXT,
	COUNTRY TEXT,
	DRAFT_YEAR TEXT,
	DRAFT_ROUND TEXT,
	DRAFT_NUMBER TEXT,
	SEASONS_STATS SEASON_STATS[],
	SCORING_CLASS SCORING_CLASS,
	YEARS_SINCE_LAST_SEASON INTEGER,
	CURRENT_SEASON INTEGER,
	PRIMARY KEY (PLAYER_NAME, CURRENT_SEASON)
);

----------------------------------------------------------------
/* POPULATE THE PLAYERS TABLE USING "YESTERDAY - TODAY" LOGIC */
----------------------------------------------------------------
INSERT INTO
	PLAYERS
WITH
	YESTERDAY AS (
		SELECT
			*
		FROM
			PLAYERS
		WHERE
			CURRENT_SEASON = 2000
	),
	TODAY AS (
		SELECT
			*
		FROM
			PLAYER_SEASONS
		WHERE
			SEASON = 2001
	)
SELECT
	COALESCE(T.PLAYER_NAME, Y.PLAYER_NAME) AS PLAYER_NAME,
	COALESCE(T.HEIGHT, Y.HEIGHT) AS HEIGHT,
	COALESCE(T.COLLEGE, Y.COLLEGE) AS COLLEGE,
	COALESCE(T.COUNTRY, Y.COUNTRY) AS COLLEGE,
	COALESCE(T.DRAFT_YEAR, Y.DRAFT_YEAR) AS DRAFT_YEAR,
	COALESCE(T.DRAFT_ROUND, Y.DRAFT_ROUND) AS DRAFT_ROUND,
	COALESCE(T.DRAFT_NUMBER, Y.DRAFT_NUMBER) AS DRAFT_NUMBER,
	CASE
		WHEN Y.SEASONS_STATS IS NULL THEN ARRAY[
			ROW (T.SEASON, T.GP, T.PTS, T.REB, T.AST)::SEASON_STATS
		]
		WHEN T.SEASON IS NOT NULL THEN Y.SEASONS_STATS || ARRAY[
			ROW (T.SEASON, T.GP, T.PTS, T.REB, T.AST)::SEASON_STATS
		]
		ELSE Y.SEASONS_STATS
	END AS SEASON_STATS,
	CASE
		WHEN T.SEASON IS NOT NULL THEN 
			CASE 
				WHEN T.PTS > 20 THEN 'star'
				WHEN T.PTS > 15 THEN 'good'
				WHEN T.PTS > 10 THEN 'average'
				ELSE 'bad'
			END::SCORING_CLASS
		ELSE Y.SCORING_CLASS
	END AS SCORING_CLASS,
	CASE
		WHEN T.SEASON IS NOT NULL THEN 0
		ELSE Y.YEARS_SINCE_LAST_SEASON + 1
	END AS YEARS_SINCE_LAST_SEASON,
	COALESCE(T.SEASON, Y.CURRENT_SEASON + 1) AS CURRENT_SEASON
FROM
	TODAY T
	FULL OUTER JOIN YESTERDAY Y ON T.PLAYER_NAME = Y.PLAYER_NAME

-------------------------------------------------
/* UNNEST STRUCT TO SHOW ATTRIBUTES AS COLUMNS */
-------------------------------------------------
SELECT
		PLAYER_NAME,
		(UNNEST(SEASONS_STATS)::SEASON_STATS).*
	FROM
		PLAYERS
	WHERE
		CURRENT_SEASON = 2001
		AND PLAYER_NAME = 'MichaelJordan'

-----------------------------------------------------------------------------
/* PLAYERS IMPROVEMENT SELECT STATEMENT DEMONSTRATION (NO GROUP BY NEEDED) */
-----------------------------------------------------------------------------
SELECT
	PLAYER_NAME,
	(SEASONS_STATS[CARDINALITY(SEASONS_STATS)]::SEASON_STATS).PTS AS LATEST_SEASON,
	(SEASONS_STATS[1]::SEASON_STATS).PTS AS FIRST_SEASON,
	(SEASONS_STATS[CARDINALITY(SEASONS_STATS)]::SEASON_STATS).PTS / CASE WHEN (SEASONS_STATS[1]::SEASON_STATS).PTS = 0 THEN 1 ELSE (SEASONS_STATS[1]::SEASON_STATS).PTS END AS IMPORVEMENT
	
FROM
	PLAYERS
WHERE
	CURRENT_SEASON = 2001 AND SCORING_CLASS = 'star'
ORDER BY 4 DESC
