------------------------------
/* CREATE PLAYERS_SDC TABLE */
------------------------------
CREATE TABLE PLAYERS_SCD (
	PLAYER_NAME TEXT, -- MAIN DESCRIPTIVE FIELD
	/* I WANT TO TRACK THIS TWO COLUMNS*/
	-------------------------------------
	SCORING_CLASS SCORING_CLASS,
	IS_ACTIVE BOOLEAN,
	-------------------------------------
	START_SEASON INTEGER, -- CONTROL FIELD
	END_SEASON INTEGER, -- CONTROL FIELD
	CURRENT_SEASON INTEGER, -- PARTITION FIELD
	PRIMARY KEY(PLAYER_NAME, CURRENT_SEASON) -- COMPOSITE PRIMARY KEY
);

--------------------------------
/* POPULATE PLAYERS_SCD TABLE */
--------------------------------
INSERT INTO PLAYERS_SCD
WITH WITH_PREVIOUS AS (
	SELECT 
		PLAYER_NAME,
		CURRENT_SEASON,
		SCORING_CLASS,
		IS_ACTIVE,
		LAG(SCORING_CLASS, 1) OVER (PARTITION BY PLAYER_NAME ORDER BY CURRENT_SEASON) AS PREVIOUS_SCORING_CLASS,
		LAG(IS_ACTIVE, 1) OVER (PARTITION BY PLAYER_NAME ORDER BY CURRENT_SEASON) AS PREVIOUS_IS_ACTIVE
	FROM PLAYERS
	WHERE CURRENT_SEASON <= 2021
), WITH_INDICATORS AS (
	SELECT 
		*, 
		CASE 
			WHEN SCORING_CLASS <> PREVIOUS_SCORING_CLASS THEN 1 
			WHEN IS_ACTIVE <> PREVIOUS_IS_ACTIVE THEN 1 
			ELSE 0
		END AS CHANGE_INDICATOR
	FROM WITH_PREVIOUS
), WITH_STREAKS AS (
	SELECT 
		*,
		SUM(CHANGE_INDICATOR) OVER (PARTITION BY PLAYER_NAME ORDER BY CURRENT_SEASON) AS STREAK_IDENTIFIER
	FROM WITH_INDICATORS
)

SELECT 
	PLAYER_NAME,
	SCORING_CLASS,
	IS_ACTIVE,
	MIN(CURRENT_SEASON) AS START_SEASON,
	MAX(CURRENT_SEASON) AS END_SEASON,
	2021 AS CURRENT_SEASON
FROM WITH_STREAKS
GROUP BY 
	PLAYER_NAME,
	STREAK_IDENTIFIER,
	IS_ACTIVE,
	SCORING_CLASS
ORDER BY PLAYER_NAME, START_SEASON

------------------------------------------------------------
/* CREATE SCD_TYPE STRUCT USED IN THE CHANGED_RECORDS CTE */
------------------------------------------------------------

CREATE TYPE SCD_TYPE AS (
	SCORING_CLASS SCORING_CLASS,
	IS_ACTIVE BOOLEAN,
	START_SEASON INTEGER,
	END_SEASON INTEGER
);

--------------------------------------------------------------
/* HOW TO INCREMENTALY LOAD DATA INTO THE PLAYERS_SCD TABLE */
--------------------------------------------------------------

WITH LAST_SEASON_SCD AS (
	SELECT * FROM PLAYERS_SCD
	WHERE CURRENT_SEASON = 2021
	AND END_SEASON = 2021
),
	HISTORICAL_SCD AS (
		SELECT 
			PLAYER_NAME,
			SCORING_CLASS,
			IS_ACTIVE,
			START_SEASON,
			END_SEASON
		FROM PLAYERS_SCD
		WHERE CURRENT_SEASON = 2021
		AND END_SEASON < 2021
	),
	THIS_SEASON_DATA AS (
		SELECT * FROM PLAYERS
		WHERE CURRENT_SEASON = 2022
	),
	UNCHANGED_RECORDS AS (
		SELECT 
			TS.PLAYER_NAME,
			TS.SCORING_CLASS,
			TS.IS_ACTIVE,
			LS.START_SEASON,
			LS.CURRENT_SEASON AS END_SEASON
		FROM THIS_SEASON_DATA TS
			JOIN LAST_SEASON_SCD LS
			ON TS.PLAYER_NAME = LS.PLAYER_NAME
		WHERE TS.SCORING_CLASS = LS.SCORING_CLASS
			  AND TS.IS_ACTIVE = LS.IS_ACTIVE
	),
	CHANGED_RECORDS AS (
		SELECT 
			TS.PLAYER_NAME,
			(UNNEST(ARRAY[
				ROW(
					LS.SCORING_CLASS,
					LS.IS_ACTIVE,
					LS.START_SEASON,
					LS.END_SEASON
				)::SCD_TYPE,
				ROW(
					TS.SCORING_CLASS,
					TS.IS_ACTIVE,
					TS.CURRENT_SEASON,
					TS.CURRENT_SEASON
				)::SCD_TYPE
			])).*
		FROM THIS_SEASON_DATA TS
			LEFT JOIN LAST_SEASON_SCD LS
			ON TS.PLAYER_NAME = LS.PLAYER_NAME
		WHERE (TS.SCORING_CLASS <> LS.SCORING_CLASS)
			  OR (TS.IS_ACTIVE <> LS.IS_ACTIVE)
	),
	NEW_RECORDS AS (
		SELECT
			TS.PLAYER_NAME,
			TS.SCORING_CLASS,
			TS.IS_ACTIVE,
			TS.CURRENT_SEASON AS START_SEASON,
			TS.CURRENT_SEASON AS END_SEASON
		FROM THIS_SEASON_DATA TS
			LEFT JOIN LAST_SEASON_SCD LS
			ON TS.PLAYER_NAME = LS.PLAYER_NAME
		WHERE LS.PLAYER_NAME IS NULL
	)

SELECT * FROM HISTORICAL_SCD
UNION ALL
SELECT * FROM UNCHANGED_RECORDS
UNION ALL
SELECT * FROM CHANGED_RECORDS
UNION ALL
SELECT * FROM NEW_RECORDS